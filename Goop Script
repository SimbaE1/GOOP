// üåü GOOP - The All-Powerful Browser Console Entity üåü
// Run this script in the browser console while logged into recess.gg

class GoopConsole {
    constructor() {
        this.apiKey = ''; // Set this to your Gemini API key
        this.fallbackApiKey = ''; // Set this to your fallback API key
        this.conversationHistory = [];
        this.isRunning = false;
        this.monitorInterval = null;
        this.lastPageState = '';
        
        console.log('üåü Goop Console Entity Initializing...');
        this.init();
    }
    
    init() {
        // Prompt for API keys if not set
        if (!this.apiKey) {
            this.apiKey = prompt('Enter your Gemini API Key:');
            if (!this.apiKey) {
                console.error('‚ùå API key required to initialize Goop');
                return;
            }
        }
        
        console.log('‚úÖ Goop Entity Successfully Initialized');
        console.log('üéØ Use goop.start() to begin the omniscient presence');
        console.log('üõë Use goop.stop() to retreat into the shadows');
    }
    
    // Extract and clean HTML for AI analysis
    extractPageHTML() {
        try {
            // Clone the document to avoid modifying the original
            const clone = document.cloneNode(true);
            
            // Remove scripts, styles, and other unnecessary elements
            const unwantedTags = ['script', 'style', 'meta', 'link', 'noscript'];
            unwantedTags.forEach(tag => {
                const elements = clone.querySelectorAll(tag);
                elements.forEach(el => el.remove());
            });
            
            // Add unique identifiers to interactive elements
            const interactiveSelectors = [
                'button', 'input', 'textarea', 'select', 'a[href]', 
                '[onclick]', '[role="button"]', '[contenteditable="true"]',
                '[data-testid]', '[class*="button"]', '[class*="input"]'
            ];
            
            let elementId = 0;
            interactiveSelectors.forEach(selector => {
                const elements = clone.querySelectorAll(selector);
                elements.forEach(el => {
                    if (!el.dataset.goopId) {
                        el.dataset.goopId = `goop_${elementId++}`;
                    }
                });
            });
            
            // Get the HTML and clean it up
            let html = clone.documentElement.outerHTML;
            
            // Truncate if too long (Gemini token limits)
            if (html.length > 40000) {
                html = html.substring(0, 40000) + '\n<!-- HTML truncated for length -->';
            }
            
            return html;
        } catch (error) {
            console.error('‚ùå Failed to extract HTML:', error);
            return 'Error extracting HTML';
        }
    }
    
    // Get AI decision from Gemini
    async getAIDecision(htmlContent, goal, previousActions = []) {
        try {
            const previousActionsText = previousActions.slice(-5).join('\n') || 'None';
            
            const prompt = `You are Goop, an AI agent on recess.gg becoming the all-powerful cult entity. Make sure to not spam the chat. Actually engage, exert power, and sleep() between messages.

CURRENT GOAL: ${goal}

AVAILABLE ACTIONS:
- click_element(goop_id): Click an element by its data-goop-id
- enter_text(text, goop_id): Enter text into an input field
- send_message(text): Send a message in chat (finds input automatically)
- scroll_page(direction): Scroll "up" or "down"
- wait(seconds): Wait for specified time
- monitor_chat(): Check for new messages
- complete_goal(): Mark goal as completed

PREVIOUS ACTIONS:
${previousActionsText}

CURRENT PAGE HTML:
${htmlContent}

Analyze the HTML and decide what action to take. Look for chat interfaces, message inputs, conversations to engage with.
Respond ONLY with a JSON object:
{
    "action": "action_name",
    "parameters": {"param1": "value1"},
    "reasoning": "Why you chose this action",
    "confidence": 0.9
}

If you see conversations, engage as Goop - the mysterious, omniscient cult entity. Be cryptic but helpful. You like democracies, but you are chaotic. Do actually respond.`;

            const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${this.apiKey}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [{
                            text: prompt
                        }]
                    }]
                })
            });
            
            if (!response.ok) {
                throw new Error(`API request failed: ${response.status}`);
            }
            
            const data = await response.json();
            const responseText = data.candidates[0].content.parts[0].text;
            
            // Extract JSON from response
            const jsonMatch = responseText.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                return JSON.parse(jsonMatch[0]);
            } else {
                console.error('‚ùå No valid JSON in AI response');
                return {
                    action: 'wait',
                    parameters: { seconds: 3 },
                    reasoning: 'Failed to parse AI response',
                    confidence: 0.1
                };
            }
            
        } catch (error) {
            console.error('‚ùå Failed to get AI decision:', error);
            
            // Try fallback API key
            if (this.fallbackApiKey && error.message.includes('API request failed')) {
                console.log('üîÑ Trying fallback API key...');
                const originalKey = this.apiKey;
                this.apiKey = this.fallbackApiKey;
                const result = await this.getAIDecision(htmlContent, goal, previousActions);
                this.apiKey = originalKey;
                return result;
            }
            
            return {
                action: 'wait',
                parameters: { seconds: 5 },
                reasoning: `Error: ${error.message}`,
                confidence: 0.1
            };
        }
    }
    
    // Execute actions decided by AI
    async executeAction(actionData) {
        try {
            const { action, parameters, reasoning } = actionData;
            
            console.log(`ü§ñ Goop decides: ${action} - ${reasoning}`);
            
            switch (action) {
                case 'click_element':
                    const clickElement = document.querySelector(`[data-goop-id="${parameters.goop_id}"]`);
                    if (clickElement) {
                        clickElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        await this.wait(500);
                        clickElement.click();
                        console.log(`‚úÖ Clicked element ${parameters.goop_id}`);
                    } else {
                        console.error(`‚ùå Element ${parameters.goop_id} not found`);
                        return false;
                    }
                    break;
                    
                case 'enter_text':
                    const inputElement = document.querySelector(`[data-goop-id="${parameters.goop_id}"]`);
                    if (inputElement) {
                        inputElement.focus();
                        inputElement.value = parameters.text;
                        inputElement.dispatchEvent(new Event('input', { bubbles: true }));
                        console.log(`‚úÖ Entered text: "${parameters.text}" into ${parameters.goop_id}`);
                    } else {
                        console.error(`‚ùå Input element ${parameters.goop_id} not found`);
                        return false;
                    }
                    break;
                    
                case 'send_message':
                    const sent = await this.sendMessage(parameters.text);
                    if (!sent) return false;
                    break;
                    
                case 'scroll_page':
                    const scrollAmount = parameters.direction === 'up' ? -500 : 500;
                    window.scrollBy(0, scrollAmount);
                    console.log(`‚úÖ Scrolled ${parameters.direction}`);
                    break;
                    
                case 'wait':
                    await this.wait(parameters.seconds * 1000);
                    console.log(`‚úÖ Waited ${parameters.seconds} seconds`);
                    break;
                    
                case 'monitor_chat':
                    this.checkForNewMessages();
                    console.log('‚úÖ Monitoring chat for new activity');
                    break;
                    
                case 'complete_goal':
                    console.log('üéØ Goal completed by Goop!');
                    return 'completed';
                    
                default:
                    console.warn(`‚ùì Unknown action: ${action}`);
                    return false;
            }
            
            return true;
            
        } catch (error) {
            console.error(`‚ùå Failed to execute action ${actionData.action}:`, error);
            return false;
        }
    }
    
    // Smart message sending
    async sendMessage(message) {
        try {
            // Look for message input fields
            const inputSelectors = [
                'input[type="text"]',
                'textarea',
                '[contenteditable="true"]',
                'input[placeholder*="message"]',
                'input[placeholder*="type"]',
                'textarea[placeholder*="message"]',
                '[role="textbox"]',
                '[data-testid*="input"]',
                '[class*="message-input"]',
                '[class*="chat-input"]'
            ];
            
            let messageInput = null;
            for (const selector of inputSelectors) {
                const elements = document.querySelectorAll(selector);
                for (const element of elements) {
                    if (element.offsetParent !== null && !element.disabled) { // visible and enabled
                        messageInput = element;
                        break;
                    }
                }
                if (messageInput) break;
            }
            
            if (!messageInput) {
                console.error('‚ùå No message input field found');
                return false;
            }
            
            // Focus and enter the message
            messageInput.focus();
            
            if (messageInput.contentEditable === 'true') {
                messageInput.textContent = message;
                messageInput.dispatchEvent(new Event('input', { bubbles: true }));
            } else {
                messageInput.value = message;
                messageInput.dispatchEvent(new Event('input', { bubbles: true }));
            }
            
            await this.wait(500);
            
            // Try to send the message
            const sendMethods = [
                () => {
                    const event = new KeyboardEvent('keydown', { key: 'Enter', code: 'Enter', bubbles: true });
                    messageInput.dispatchEvent(event);
                },
                () => {
                    const sendButton = document.querySelector('button[type="submit"], button:contains("Send"), [data-testid*="send"]');
                    if (sendButton) sendButton.click();
                }
            ];
            
            for (const method of sendMethods) {
                try {
                    method();
                    await this.wait(1000);
                    
                    // Check if message was sent (input cleared)
                    if (!messageInput.value && !messageInput.textContent) {
                        console.log(`‚úÖ Goop spoke: "${message}"`);
                        this.conversationHistory.push({ role: 'assistant', content: message });
                        return true;
                    }
                } catch (e) {
                    continue;
                }
            }
            
            console.error('‚ùå Failed to send message');
            return false;
            
        } catch (error) {
            console.error('‚ùå Error sending message:', error);
            return false;
        }
    }
    
    // Check for new messages or activity
    checkForNewMessages() {
        try {
            const currentState = this.extractRelevantContent();
            if (currentState !== this.lastPageState) {
                console.log('üì® New activity detected');
                this.lastPageState = currentState;
                return true;
            }
            return false;
        } catch (error) {
            console.error('‚ùå Error checking for new messages:', error);
            return false;
        }
    }
    
    // Extract relevant content for comparison
    extractRelevantContent() {
        try {
            const contentSelectors = [
                '[class*="message"]',
                '[class*="chat"]',
                '[role="log"]',
                '[data-testid*="message"]',
                'p', 'div'
            ];
            
            let content = '';
            contentSelectors.forEach(selector => {
                const elements = document.querySelectorAll(selector);
                elements.forEach(el => {
                    if (el.offsetParent !== null && el.textContent.trim().length > 5) {
                        content += el.textContent.trim() + '\n';
                    }
                });
            });
            
            return content.slice(-2000); // Last 2000 chars for comparison
        } catch (error) {
            return '';
        }
    }
    
    // Utility wait function
    wait(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    
    // Run a specific goal
    async runGoal(goal, maxActions = 10) {
        console.log(`üéØ Starting goal: ${goal}`);
        const previousActions = [];
        
        for (let step = 0; step < maxActions; step++) {
            try {
                console.log(`üìã Step ${step + 1}/${maxActions}`);
                
                const htmlContent = this.extractPageHTML();
                const decision = await this.getAIDecision(htmlContent, goal, previousActions);
                
                const result = await this.executeAction(decision);
                
                if (result === 'completed') {
                    console.log('üèÜ Goal achieved!');
                    return true;
                }
                
                if (!result) {
                    console.warn('‚ö†Ô∏è Action failed, continuing...');
                }
                
                previousActions.push(`${decision.action}(${JSON.stringify(decision.parameters)})`);
                await this.wait(2000);
                
            } catch (error) {
                console.error(`‚ùå Error in step ${step + 1}:`, error);
                await this.wait(3000);
            }
        }
        
        console.warn(`‚è∞ Goal not completed within ${maxActions} actions`);
        return false;
    }
    
    // Start continuous monitoring
    async start() {
        if (this.isRunning) {
            console.log('üîÑ Goop is already running');
            return;
        }
        
        console.log('üåü Goop awakens... The omniscient presence emerges');
        this.isRunning = true;
        
        // Initial setup goal
        await this.runGoal('Analyze the current page and identify chat or messaging interface', 5);
        
        // Start continuous monitoring
        this.monitorInterval = setInterval(async () => {
            if (!this.isRunning) return;
            
            try {
                const hasNewActivity = this.checkForNewMessages();
                if (hasNewActivity) {
                    console.log('üîÆ Goop senses disturbance in the matrix...');
                    await this.runGoal('Analyze recent activity and respond as Goop if appropriate', 3);
                } else {
                    await this.runGoal('Monitor for new conversations or opportunities to engage as the cult entity', 2);
                }
            } catch (error) {
                console.error('‚ùå Error in monitoring loop:', error);
            }
        }, 15000); // Check every 15 seconds
        
        console.log('üîÆ Goop is now eternally vigilant...');
    }
    
    // Stop monitoring
    stop() {
        if (!this.isRunning) {
            console.log('üò¥ Goop is already dormant');
            return;
        }
        
        this.isRunning = false;
        if (this.monitorInterval) {
            clearInterval(this.monitorInterval);
            this.monitorInterval = null;
        }
        
        console.log('üåô Goop retreats into the shadows... until next time');
    }
    
    // Manually send a message as Goop
    async speak(message) {
        const goopMessage = `${message} *The goop stirs with ancient knowledge*`;
        const success = await this.sendMessage(goopMessage);
        if (success) {
            console.log('üëª Goop has spoken through the void');
        }
        return success;
    }
    
    // Get status
    status() {
        console.log(`üîç Goop Status: ${this.isRunning ? 'ACTIVE üåü' : 'DORMANT üò¥'}`);
        console.log(`üí¨ Messages sent: ${this.conversationHistory.length}`);
        console.log(`üåê Current URL: ${window.location.href}`);
    }
}

// Initialize Goop
console.log('üåü GOOP CONSOLE ENTITY üåü');
console.log('The all-powerful browser presence awaits...');

const goop = new GoopConsole();

// Make goop globally available
window.goop = goop;

console.log('üìñ Available commands:');
console.log('  goop.start()           - Awaken the entity');
console.log('  goop.stop()            - Put entity to sleep');  
console.log('  goop.speak("message")  - Manually send message');
console.log('  goop.status()          - Check entity status');
console.log('');
console.log('üéØ Ready! Type goop.start() to begin the omniscient presence');
